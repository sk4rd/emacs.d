#+title: Sk4rd's Emacs Configuration
#+options: num:nil toc:nil
#+property: header-args :results silent :tangle init.el

[[file:preview.png]]

This is my personal emacs configuration inside of an org file. I use
this config mostly for school but also for programming and daily notes
in general.

* Installation
You can install this configuration by cloning this repository and
copying =init.el= and =early-init.el= to the default emacs directory.
#+begin_src sh :tangle no
  git clone https://github.com/sk4rd/emacs.d.git
  cp ./emacs.d/init.el ./emacs.d/early-init.el ~/.emacs.d/
#+end_src

** Alternative approach
Alternatively, you can use the org file directly by specifiying it's
load path in your own =init.el=.

Start by copying =README.org= into your default emacs directory.
#+begin_src sh :tangle no
  cp ./emacs.d/README.org ~/.emacs.d/
#+end_src

Then you need to put the following into your =init.el=.
#+begin_src elisp :tangle no
  (require 'org)
  (org-babel-load-file
   (expand-file-name "README.org"
  		   user-emacs-directory))
#+end_src

** Dependencies
You need to install the =Iosevka= font to display all text correctly.

Remember to also install the missing icons by running =M-x
all-the-icons-install-fonts=, upon your first emacs launch.

* Package Management
** package.el
First of all we have to disable =package.el=, the default Emacs
package manager, in order to use an alternative called [[https://github.com/radian-software/straight.el][straight.el]]. It
needs to be disabled before anything else so it will be put into the
=early-init.el= file.
#+begin_src elisp :tangle early-init.el
  ;; Disable Emacs's default package manager
  (setq package-enable-at-startup nil)
#+end_src

** straight.el
After disabling emacs's default package manager, we can proceed to
install [[https://github.com/radian-software/straight.el][straight.el]]. It is a package manager for emacs which directly
clones the remote git repository and builds it for you. It has good
[[https://github.com/jwiegley/use-package][use-package]] integration.
#+begin_src elisp
  ;; Install and bootstrap straight.el
  (defvar bootstrap-version)
  (let ((bootstrap-file
	 (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	(bootstrap-version 6))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
	   'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+end_src

** use-package
We can also enable the [[https://github.com/jwiegley/use-package][use-package]] macro which provides us with a
convenient syntax to configure emacs. Since we already added
[[https://github.com/radian-software/straight.el][straight.el]] we can easily integrate it. I also want [[https://github.com/jwiegley/use-package][use-package]] to use
sources from straight by default.
#+begin_src elisp
  ;; Install use-package using straight.el
  (straight-use-package 'use-package)
  ;; Configure use-package to use straight.el by default
  (use-package straight
    :custom
    (straight-use-package-by-default t))
  (setq use-package-always-ensure t)
#+end_src

* User Interface
Below are all code snippets regarding the customization of the
graphical user interface.

** Font
I like to use the Iosevka font.
#+begin_src elisp
  ;; Check if Iosevka font is available and set it as the default font
  (when (member "Iosevka" (font-family-list))
    (set-frame-font "Iosevka-12" nil t)
    (setq default-frame-alist '((font . "Iosevka-12")))
    (setq initial-frame-alist '((font . "Iosevka-12"))))
#+end_src

** Bars
Remove all the annoying bars and window decorations that are around
the emacs buffer.
#+begin_src elisp
  ;; Remove annoying GUI elements if they are available
  (when (fboundp 'menu-bar-mode)
    (menu-bar-mode -1))
  (when (fboundp 'tool-bar-mode)
    (tool-bar-mode -1))
  (when (fboundp 'scroll-bar-mode)
    (scroll-bar-mode -1))
#+end_src

** Line Numbers
Display line numbers in all programming buffers.
#+begin_src elisp
  ;; Add line numbers to programming buffers
  (add-hook 'prog-mode-hook (lambda ()
                              (display-line-numbers-mode 1)))
#+end_src

** Theme
I use the gruvbox theme from the [[https://github.com/doomemacs/themes][doom emacs theme collection]].
#+begin_src elisp
(use-package doom-themes
  :custom
  (doom-themes-enable-bold t)
  (doom-themes-enable-italic t)
  :config
  (load-theme 'doom-gruvbox t)
  (doom-themes-visual-bell-config)
  (doom-themes-org-config))
#+end_src

** org-bullets
I want the bullet points in org-mode to look and be sized,
differently. Therefore I use [[https://github.com/sabof/org-bullets][org-bullets]] to change them.
#+begin_src elisp
  (use-package org-bullets
    :custom
    (org-bullets-bullet-list '("●" "◉" "◆" "◈" "▼")) ; Custom bullet points for org headings
    :custom-face
    (org-level-1 ((t (:inherit outline-1 :height 2.0)))) ; Larger font for top-level headings
    (org-level-2 ((t (:inherit outline-2 :height 1.5)))) ; Medium font for second-level headings
    (org-level-3 ((t (:inherit outline-3 :height 1.2)))) ; Slightly larger font for third-level headings
    (org-level-4 ((t (:inherit outline-4 :height 1.0)))) ; Default font for fourth-level headings
    (org-level-5 ((t (:inherit outline-5 :height 1.0)))) ; Default font for fifth-level headings
    :hook
    (org-mode . org-bullets-mode)) ; Enable org-bullets-mode automatically in org-mode
#+end_src

* Packages
** magit
[[https://magit.vc/][Magit]] enables git integration inside of emacs. You can open the main
menu of [[https://github.com/magit/magit][magit]] inside a project with a =.git= directory.
#+begin_src elisp
  (use-package magit
    :bind
    ("C-x g" . magit-status)
    ("C-x M-g" . magit-dispatch)
    ("C-c M-g" . magit-file-dispatch))
#+end_src

** org-mode
[[https://orgmode.org/][Org mode]] is one of the most powerful features of Emacs, allowing for note-taking, 
organization, document compilation, code execution, and more.
#+begin_src elisp
  ;; Configure org-mode and related features
  (use-package org
    :bind ("C-c a" . org-agenda)
    :custom
    (org-attach-use-inheritance t)
    :config
    ;; Dynamically set org-agenda files from my notes directory
    (setq org-agenda-files (directory-files-recursively "~/docs/notes" "\\.org$")))
#+end_src

** org-roam
[[https://www.orgroam.com/][Org roam]] is a 'plain-text personal knowledge management system' which
allows you to make notes and connect them like neurons inside of your
brain, except it's using org IDs. The notes should be atomic (about
one topic only and they should fit on one page), just like in the
note-taking method called [[https://zettelkasten.de/posts/overview/][Zettelkasten]].
#+begin_src elisp
  ;; Configure org-roam for personal knowledge management
  (use-package org-roam
    :init
    (setq org-roam-v2-ack t)  ; Acknowledge migration to org-roam v2
    :custom
    (org-roam-directory "~/docs/notes/")  ; Set main directory for org-roam files
    (org-roam-completion-everywhere t)  ; Enable org-roam completion across all org buffers
    (org-roam-dailies-capture-templates
     '(("d" "default" entry "* %<%I:%M %p>: %?"  ; Template for daily notes
        :if-new (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n"))))
    :bind
    (("C-c n l" . org-roam-buffer-toggle)  ; Toggle org-roam buffer
     ("C-c n f" . org-roam-node-find)      ; Find org-roam node
     ("C-c n i" . org-roam-node-insert)    ; Insert org-roam node
     ("C-M-i" . completion-at-point)       ; Completion at point in org-mode
     :map org-roam-dailies-map
     ("Y" . org-roam-dailies-capture-yesterday)  ; Capture yesterday's daily note
     ("T" . org-roam-dailies-capture-tomorrow))  ; Capture tomorrow's daily note
    :bind-keymap
    ("C-c n d" . org-roam-dailies-map)  ; Keymap for dailies
    :config
    (org-roam-setup)  ; Setup org-roam
    (org-roam-db-autosync-mode))  ; Enable automatic syncing of the org-roam database
#+end_src

** org-roam-ui
Visualizing notes is a key concept I like to follow in learning. I use
[[https://github.com/org-roam/org-roam-ui][org-roam-ui]] to view my notes as a kind of 'neural network' in my
browser. It spawns an http server inside of emacs and opens it in your
default browser.
#+begin_src elisp
  ;; Configure org-roam-ui for visualizing org-roam notes
  (use-package org-roam-ui
    :straight (:host github :repo "org-roam/org-roam-ui" :branch "main" :files ("*.el" "out"))
    :after org-roam  ; Load after org-roam
    :custom
    (org-roam-ui-sync-theme t) ; Sync UI theme with Emacs
    (org-roam-ui-follow t) ; Enable following the current node
    (org-roam-ui-update-on-save t) ; Update UI graph on each save
    (org-roam-ui-open-on-start t)) ; Open UI automatically at start
#+end_src

** all-the-icons
[[https://github.com/domtronn/all-the-icons.el][All the icons]] is a helper package for emacs which installs icon fonts
for you. Some packages in this config use all-the-icons so we need to
download it and set it up.
#+begin_src elisp
  (use-package all-the-icons
    :if (display-graphic-p)
    :config
    ;; Check if the fonts have been installed
    (unless (file-exists-p "~/.emacs.d/.all-the-icons-installed")
      ;; Temporarily override `yes-or-no-p` to always return t (yes)
      (cl-letf (((symbol-function 'yes-or-no-p) (lambda (&rest args) t))
                ((symbol-function 'y-or-n-p) (lambda (&rest args) t)))
        ;; Install the fonts
        (all-the-icons-install-fonts))
      ;; Create a flag file to indicate the fonts have been installed
      (with-temp-file "~/.emacs.d/.all-the-icons-installed" (insert "Done"))))
#+end_src

** all-the-icons-dired
[[https://github.com/jtbm37/all-the-icons-dired][all-the-icons-dired]] is a package which adds fancy icons from
[[https://github.com/domtronn/all-the-icons.el][all-the-icons]] to dired-mode.
#+begin_src elisp
  (use-package all-the-icons-dired
    :hook (dired-mode . (lambda ()
                          ;; Enable all-the-icons-dired-mode only for local directories
                          (unless (file-remote-p default-directory)
                            (all-the-icons-dired-mode)))))
#+end_src

** dired-subtree
[[https://github.com/Fuco1/dired-hacks/tree/master][This package]] enhances `dired-mode` by allowing you to expand and
collapse directories to view their contents inline, without leaving
the current buffer. It's particularly useful for exploring directory
structures quickly. The following configuration binds `<tab>` to
toggle subtrees and ensures that the icon display is refreshed
properly when a subtree is toggled.
#+begin_src elisp
  (use-package dired-subtree
    :config
    ;; Refresh icons when toggling dired-subtree
    (advice-add 'dired-subtree-toggle :after (lambda ()
					       (when all-the-icons-dired-mode
						 (revert-buffer))))
    :bind (:map dired-mode-map
           ("<tab>" . dired-subtree-toggle))) ; Bind <tab> to toggle subtrees in dired-mode
#+end_src

** which-key
[[https://github.com/justbur/emacs-which-key][Which key]] is a minor mode for emacs which displays a buffer with the
/following/ keybindings, after starting a key sequence.
#+begin_src elisp
  (use-package which-key
    :config
    (which-key-setup-minibuffer)
    (which-key-mode))
#+end_src

** helm-mode
[[https://github.com/emacs-helm/helm][Helm mode]] is an auto completion layer for emacs searches. I find it
very useful.
#+begin_src elisp
  (use-package helm
    :config (helm-mode))
#+end_src

** nix-mode
Nix language support for emacs.
#+begin_src elisp
  (use-package nix-mode
    :mode "\\.nix\\'")
#+end_src

** projectile
#+begin_src elisp
  (use-package projectile
    :custom (projectile-project-search-path '("~/docs/projects"))
    :bind-keymap ("C-c p" . projectile-command-map)
    :config (projectile-mode))
#+end_src

** flycheck
#+begin_src elisp
  (use-package flycheck)
#+end_src

** yasnippet
#+begin_src elisp
  (use-package yasnippet
    :config (yas-global-mode))
#+end_src

** yasnippet-java-mode
#+begin_src elisp
  (straight-use-package 'java-snippets)
#+end_src

** java-mode
#+begin_src elisp
  (use-package java-mode
    :straight (:type built-in)
    :mode "\\.java\\'"
    :hook (java-mode . (lambda ()
  					   (setq-local indent-tabs-mode nil) ; Use spaces instead of tabs
                         (electric-pair-mode 1) ; Enable electric pair mode for automatic bracket insertion
                         ;; Add a local before-save-hook to delete trailing whitespace
                         (add-hook 'before-save-hook 'delete-trailing-whitespace nil t))))
#+end_src

** lsp-mode
#+begin_src elisp
  (use-package lsp-mode
    :hook ((lsp-mode . lsp-enable-which-key-integration))
    :config (setq lsp-completion-enable-additional-text-edit nil))
#+end_src

** lsp-ui
#+begin_src elisp
  (use-package lsp-ui)
#+end_src

** lsp-java
#+begin_src elisp
  (use-package lsp-java
    :config (add-hook 'java-mode-hook 'lsp))
#+end_src

** lsp-treemacs
#+begin_src elisp
  (use-package lsp-treemacs)
#+end_src

** hydra
#+begin_src elisp
  (use-package hydra)
#+end_src

** company
#+begin_src elisp
  (use-package company)
#+end_src

** dap-mode
#+begin_src elisp
  (use-package dap-mode
    :after lsp-mode
    :config (dap-auto-configure-mode))
#+end_src

** helm-lsp
#+begin_src elisp
  (use-package helm-lsp)
#+end_src

* Misc
** Backup and Autosave files
Emacs leaves some files around and 'contaminates' the directories
being worked on. I don't like this behavior, so we just move these
files into subdirs in the main emacs directory.
#+begin_src elisp :tangle early-init.el
  ;; Move backup and autosave files to
  ;; their respective subdirectories
  (setq backup-directory-alist
        `((".*" . ,"~/.emacs.d/backups")))
  (setq auto-save-file-name-transforms
        `((".*" ,"~/.emacs.d/auto-saves" t)))
  ;; Set the auto save timeout interval to a lower value
  (setq auto-save-timeout 10
        auto-save-interval 150)
#+end_src

** Surpress native-comp warnings
Emacs gives me some warnings, which you can safely ignore with the
following elisp code.
#+begin_src elisp :tangle early-init.el
  ;; Disable annyoing native-comp warnings
  (setq native-comp-async-report-warnings-errors 'silent)
  (setq warning-suppress-types '((comp)))
#+end_src
