#+title: Sk4rd's Emacs Configuration
#+options: num:nil toc:nil
#+property: header-args :results silent :tangle init.el

This is my personal emacs configuration inside of an org file. I use
this config mostly for school but also for programming and daily notes
in general.

*THIS PROJECT IS A WORK IN PROGRESS*

[[file:preview.png]]

* Table of Contents
- [[#installation][Installation]]
  - [[#automatic][Automatic]]
  - [[#manual][Manual]]
  - [[#requirements--dependencies][Requirements / Dependencies]]
- [[#package-management][Package Management]]
  - [[#packageel][package.el]]
  - [[#straightel][straight.el]]
  - [[#use-package][use-package]]
- [[#user-interface][User Interface]]
  - [[#font][Font]]
  - [[#bars][Bars]]
  - [[#line-numbers][Line Numbers]]
  - [[#theme][Theme]]
  - [[#icons][Icons]]
  - [[#icons-in-dired][Icons in Dired]]
- [[#org-mode][Org Mode]]
  - [[#org][Org]]
  - [[#bullets][Bullets]]
  - [[#roam][Roam]]
  - [[#roam-ui][Roam UI]]
- [[#lsp-mode][LSP Mode]]
  - [[#lsp-mode][LSP]]
  - [[#lsp-ui][LSP UI]]
  - [[#lsp-java][Java]]
  - [[#lsp-nix][Nix]]
  - [[#lsp-treemacs][Treemacs]]
  - [[#lsp-helm][Helm]]
- [[#coding-languages][Coding Languages]]
  - [[#java][Java]]
  - [[#nix][Nix]]
- [[#other][Other]]
- [[#miscellaneous][Miscellaneous]]
  - [[#backup-and-autosave-files][Backup and Autosave files]]
  - [[#surpress-native-comp-warnings][Surpress native-comp warnings]]
  - [[#tell-a-fortune][Tell a Fortune]]

* Installation
** Automatic
For a quick and automatic setup, you can use the following
script. This script will clone the repository, create the necessary
directories, and set up the configuration files for you. Ensure you
have =emacs= installed on your system.

Execute the following command in your terminal. It will perform all
necessary steps to set up the Emacs configuration:
#+begin_src sh :tangle no
  curl -sL https://raw.githubusercontent.com/sk4rd/emacs.d/master/install.sh | bash
#+end_src

** Manual
If you prefer to install this configuration manually, start by cloning
the repository. Then, move (or copy) the =init.el= and =early-init.el=
files into your default Emacs directory (=~/.emacs.d=). If you already
have a configuration in =~/.emacs.d=, consider backing it up first.

Execute the following commands in your terminal to clone the
repository and move the files:
#+begin_src sh :tangle no
  git clone https://github.com/sk4rd/emacs.d.git
  mkdir -p ~/.emacs.d
  mv ./emacs.d/init.el ./emacs.d/early-init.el ~/.emacs.d/
#+end_src

Alternatively, if you wish to copy instead of moving the files,
replace =mv= with =cp= in the above command.

** Using This Configuration Directly
You can use this README (=README.org=) directly as your Emacs
configuration file. This method involves executing the Emacs Lisp
(elisp) code blocks contained within the org file.
#+begin_src sh :tangle no
  mkdir -p ~/.emacs.d
  mv ./emacs.d/README.org ~/.emacs.d/
#+end_src

Then you need to put the following into your =init.el=.
#+begin_src elisp :tangle no
  (require 'org)
  (org-babel-load-file
   (expand-file-name "README.org"
  		   user-emacs-directory))
#+end_src

** Requirements / Dependencies
Before proceeding with the installation and setup of this Emacs
configuration, please ensure the following dependencies are installed
on your system:

1. *Iosevka Font*: This configuration uses the 'Iosevka' font for its
   aesthetic and readability. It can be downloaded and installed from
   [[https://github.com/be5invis/Iosevka][Iosevka's GitHub repository]] or through your operating system's
   package manager.

2. *Fortune*: The [[https://wiki.archlinux.org/title/Fortune]['fortune' program]] is used to display random quotes
   at startup. It is available in the repositories of most Unix-like
   operating systems. Install it using your system's package manager.

* Package Management
** package.el
First of all we have to disable =package.el=, the default Emacs
package manager, in order to use an alternative called [[https://github.com/radian-software/straight.el][straight.el]]. It
needs to be disabled before anything else so it will be put into the
=early-init.el= file.
#+begin_src elisp :tangle early-init.el
  ;; Disable Emacs's default package manager
  (setq package-enable-at-startup nil)
#+end_src

** straight.el
After disabling emacs's default package manager, we can proceed to
install [[https://github.com/radian-software/straight.el][straight.el]]. It is a package manager for emacs which directly
clones the remote git repository and builds it for you. It has good
[[https://github.com/jwiegley/use-package][use-package]] integration.
#+begin_src elisp
  ;; Install and bootstrap straight.el
  (defvar bootstrap-version)
  (let ((bootstrap-file
	 (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	(bootstrap-version 6))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
	   'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+end_src

** use-package
We can also enable the [[https://github.com/jwiegley/use-package][use-package]] macro which provides us with a
convenient syntax to configure emacs. Since we already added
[[https://github.com/radian-software/straight.el][straight.el]] we can easily integrate it. I also want [[https://github.com/jwiegley/use-package][use-package]] to use
sources from straight by default.
#+begin_src elisp
  ;; Install use-package using straight.el
  (straight-use-package 'use-package)
  ;; Configure use-package to use straight.el by default
  (use-package straight
    :custom
    (straight-use-package-by-default t))
  (setq use-package-always-ensure t)
#+end_src

* User Interface
Below, you'll find the tweaks I've applied to Emacs' UI, making it
more visually appealing and user-friendly.

** Font
Opting for the [[https://github.com/be5invis/Iosevka][Iosevka]] font here, known for its clarity, which is
especially great for coding.
#+begin_src elisp
  ;; Setting 'Iosevka' as the default font, if it's available
  (when (member "Iosevka" (font-family-list))
    (set-frame-font "Iosevka-12" nil t)
    (setq default-frame-alist '((font . "Iosevka-12")))
    (setq initial-frame-alist '((font . "Iosevka-12"))))
#+end_src

** Bars
I've removed extraneous bars and decorations to create a cleaner
workspace.
#+begin_src elisp
  ;; Strip down the GUI to the essentials
  (when (fboundp 'menu-bar-mode)
    (menu-bar-mode -1))
  (when (fboundp 'tool-bar-mode)
    (tool-bar-mode -1))
  (when (fboundp 'scroll-bar-mode)
    (scroll-bar-mode -1))
#+end_src

** Line Numbers
Enabled line numbers in programming buffers for better navigation and
code readability.
#+begin_src elisp
  ;; Add line numbers to programming buffers
  (add-hook 'prog-mode-hook (lambda ()
                              (display-line-numbers-mode 1)))
#+end_src

** Theme
Chose the 'gruvbox' theme from the [[https://github.com/doomemacs/themes][Doom Emacs themes]] for its warm,
eye-friendly color scheme.
#+begin_src elisp
  ;; Apply the 'gruvbox' theme for a comfortable visual experience
  (use-package doom-themes
    :custom
    (doom-themes-enable-bold t)
    (doom-themes-enable-italic t)
    :config
    (load-theme 'doom-gruvbox t)
    (doom-themes-visual-bell-config)
    (doom-themes-org-config))
#+end_src

** Icons
To make Emacs more sleek, I use the [[https://github.com/domtronn/all-the-icons.el][all-the-icons]] package, which
provides a rich set of icon fonts. It's especially useful since
various packages in this configuration, like [[#icons-in-dired][all-the-icons-dired]], rely
on these icons. The setup ensures that the necessary fonts are
installed and ready to use.
#+begin_src elisp
  (use-package all-the-icons
    :if (display-graphic-p)
    :config
    ;; Check if the fonts have been installed
    (unless (file-exists-p "~/.emacs.d/.all-the-icons-installed")
      ;; Temporarily override `yes-or-no-p` to always return t (yes)
      (cl-letf (((symbol-function 'yes-or-no-p) (lambda (&rest args) t))
                ((symbol-function 'y-or-n-p) (lambda (&rest args) t)))
        ;; Install the fonts
        (all-the-icons-install-fonts))
      ;; Create a flag file to indicate the fonts have been installed
      (with-temp-file "~/.emacs.d/.all-the-icons-installed" (insert "Done"))))
#+end_src

** Icons in Dired
For a more visually intuitive experience in Dired mode, I use
[[https://github.com/jtbm37/all-the-icons-dired][all-the-icons-dired]]. This package integrates icons from [[#icons][all-the-icons]]
into Dired, making it easier to identify file types at a glance. It's
set up to activate only for local directories, keeping remote
directories simple and clean.
#+begin_src elisp
  (use-package all-the-icons-dired
    :hook (dired-mode . (lambda ()
                          ;; Enable all-the-icons-dired-mode only for local directories
                          (unless (file-remote-p default-directory)
                            (all-the-icons-dired-mode)))))
#+end_src

* Org Mode
** Org
[[https://orgmode.org/][Org mode]] is one of the most powerful features of Emacs, allowing for note-taking,
organization, document compilation, code execution, and more.
#+begin_src elisp
  ;; Configure org-mode and related features
  (use-package org
    :bind ("C-c a" . org-agenda)
    :custom
    (org-attach-use-inheritance t)
    :config
    ;; Dynamically set org-agenda files from my notes directory
    (setq org-agenda-files (directory-files-recursively "~/docs/notes" "\\.org$")))
#+end_src

** Bullets
I want the bullet points in org-mode to look and be sized,
differently. Therefore I use [[https://github.com/sabof/org-bullets][org-bullets]] to change them.
#+begin_src elisp
  (use-package org-bullets
    :custom
    (org-bullets-bullet-list '("●" "◉" "◆" "◈" "▼")) ; Custom bullet points for org headings
    :custom-face
    (org-level-1 ((t (:inherit outline-1 :height 2.0)))) ; Larger font for top-level headings
    (org-level-2 ((t (:inherit outline-2 :height 1.5)))) ; Medium font for second-level headings
    (org-level-3 ((t (:inherit outline-3 :height 1.2)))) ; Slightly larger font for third-level headings
    (org-level-4 ((t (:inherit outline-4 :height 1.0)))) ; Default font for fourth-level headings
    (org-level-5 ((t (:inherit outline-5 :height 1.0)))) ; Default font for fifth-level headings
    :hook
    (org-mode . org-bullets-mode)) ; Enable org-bullets-mode automatically in org-mode
#+end_src

** Roam
[[https://www.orgroam.com/][Org roam]] is a 'plain-text personal knowledge management system' which
allows you to make notes and connect them like neurons inside of your
brain, except it's using org IDs. The notes should be atomic (about
one topic only and they should fit on one page), just like in the
note-taking method called [[https://zettelkasten.de/posts/overview/][Zettelkasten]].
#+begin_src elisp
  ;; Configure org-roam for personal knowledge management
  (use-package org-roam
    :init
    (setq org-roam-v2-ack t)  ; Acknowledge migration to org-roam v2
    :custom
    (org-roam-directory "~/docs/notes/")  ; Set main directory for org-roam files
    (org-roam-completion-everywhere t)  ; Enable org-roam completion across all org buffers
    (org-roam-dailies-capture-templates
     '(("d" "default" entry "* %<%I:%M %p>: %?"  ; Template for daily notes
        :if-new (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n"))))
    :bind
    (("C-c n l" . org-roam-buffer-toggle)  ; Toggle org-roam buffer
     ("C-c n f" . org-roam-node-find)      ; Find org-roam node
     ("C-c n i" . org-roam-node-insert)    ; Insert org-roam node
     ("C-M-i" . completion-at-point)       ; Completion at point in org-mode
     :map org-roam-dailies-map
     ("Y" . org-roam-dailies-capture-yesterday)  ; Capture yesterday's daily note
     ("T" . org-roam-dailies-capture-tomorrow))  ; Capture tomorrow's daily note
    :bind-keymap
    ("C-c n d" . org-roam-dailies-map)  ; Keymap for dailies
    :config
    (org-roam-setup)  ; Setup org-roam
    (org-roam-db-autosync-mode))  ; Enable automatic syncing of the org-roam database
#+end_src

** Roam UI
Visualizing notes is a key concept I like to follow in learning. I use
[[https://github.com/org-roam/org-roam-ui][org-roam-ui]] to view my notes as a kind of 'neural network' in my
browser. It spawns an http server inside of emacs and opens it in your
default browser.
#+begin_src elisp
  ;; Configure org-roam-ui for visualizing org-roam notes
  (use-package org-roam-ui
    :straight (:host github :repo "org-roam/org-roam-ui" :branch "main" :files ("*.el" "out"))
    :after org-roam  ; Load after org-roam
    :custom
    (org-roam-ui-sync-theme t) ; Sync UI theme with Emacs
    (org-roam-ui-follow t) ; Enable following the current node
    (org-roam-ui-update-on-save t) ; Update UI graph on each save
    (org-roam-ui-open-on-start t)) ; Open UI automatically at start
#+end_src

* LSP Mode
** LSP
#+begin_src elisp
  (use-package lsp-mode
    :hook ((lsp-mode . lsp-enable-which-key-integration))
    :config
    (setq lsp-completion-enable-additional-text-edit nil))
#+end_src

** LSP UI
#+begin_src elisp
  (use-package lsp-ui)
#+end_src

** LSP Java
#+begin_src elisp
  (use-package lsp-java
    :config (add-hook 'java-mode-hook 'lsp))
#+end_src

** LSP Nix
#+begin_src elisp
  (use-package lsp-nix
    :straight (lsp-nix :type git :host github :repo "oxalica/nil")
    :ensure lsp-mode
    :after (lsp-mode)
    :custom
    (lsp-nix-nil-formatter ["nixpkgs-fmt"]))
#+end_src

** LSP Treemacs
#+begin_src elisp
  (use-package lsp-treemacs)
#+end_src

** LSP Helm
#+begin_src elisp
  (use-package helm-lsp)
#+end_src

* Coding Languages
** Java
#+begin_src elisp
  (use-package java-mode
    :straight (:type built-in)
    :mode "\\.java\\'"
    :hook (java-mode . (lambda ()
  		       (setq-local indent-tabs-mode nil) ; Use spaces instead of tabs
                         (electric-pair-mode 1) ; Enable electric pair mode for automatic bracket insertion
                         ;; Add a local before-save-hook to delete trailing whitespace
                         (add-hook 'before-save-hook 'delete-trailing-whitespace nil t))))
#+end_src

** Nix
Nix language support for emacs.
#+begin_src elisp
  (use-package nix-mode
    :mode "\\.nix\\'"
    :hook (nix-mode . lsp-deferred))
#+end_src

* Other
** magit
[[https://magit.vc/][Magit]] enables git integration inside of emacs. You can open the main
menu of [[https://github.com/magit/magit][magit]] inside a project with a =.git= directory.
#+begin_src elisp
  (use-package magit
    :bind
    ("C-x g" . magit-status)
    ("C-x M-g" . magit-dispatch)
    ("C-c M-g" . magit-file-dispatch))
#+end_src

** dired-subtree
[[https://github.com/Fuco1/dired-hacks/tree/master][This package]] enhances `dired-mode` by allowing you to expand and
collapse directories to view their contents inline, without leaving
the current buffer. It's particularly useful for exploring directory
structures quickly. The following configuration binds `<tab>` to
toggle subtrees and ensures that the icon display is refreshed
properly when a subtree is toggled.
#+begin_src elisp
  (use-package dired-subtree
    :config
    ;; Refresh icons when toggling dired-subtree
    (advice-add 'dired-subtree-toggle :after (lambda ()
					       (when all-the-icons-dired-mode
						 (revert-buffer))))
    :bind (:map dired-mode-map
           ("<tab>" . dired-subtree-toggle))) ; Bind <tab> to toggle subtrees in dired-mode
#+end_src

** which-key
[[https://github.com/justbur/emacs-which-key][Which key]] is a minor mode for emacs which displays a buffer with the
/following/ keybindings, after starting a key sequence.
#+begin_src elisp
  (use-package which-key
    :config
    (which-key-setup-minibuffer)
    (which-key-mode))
#+end_src

** helm-mode
[[https://github.com/emacs-helm/helm][Helm mode]] is an auto completion layer for emacs searches. I find it
very useful.
#+begin_src elisp
  (use-package helm
    :config (helm-mode))
#+end_src

** projectile
#+begin_src elisp
  (use-package projectile
    :custom (projectile-project-search-path '("~/docs/projects"))
    :bind-keymap ("C-c p" . projectile-command-map)
    :config (projectile-mode))
#+end_src

** flycheck
#+begin_src elisp
  (use-package flycheck)
#+end_src

** yasnippet
#+begin_src elisp
  (use-package yasnippet
    :config (yas-global-mode))
#+end_src

** yasnippet-java-mode
#+begin_src elisp
  (straight-use-package 'java-snippets)
#+end_src

** hydra
#+begin_src elisp
  (use-package hydra)
#+end_src

** company
#+begin_src elisp
  (use-package company)
#+end_src

** dap-mode
#+begin_src elisp
  (use-package dap-mode
    :after lsp-mode
    :config (dap-auto-configure-mode))
#+end_src


* Miscellaneous
This section includes a range of Emacs customizations that don't fall
into conventional categories. It features various tweaks and
enhancements, from managing file backups to unique personal touches
like displaying startup quotes. This miscellaneous collection serves
to fine-tune and personalize the Emacs experience.

** Backup and Autosave files
Under this section, the Emacs configuration is adjusted to manage
backup and autosave files more cleanly. By default, Emacs creates
backup and autosave files in the same directory as the original file,
which can lead to clutter. This configuration changes that behavior by
redirecting these files to dedicated subdirectories within the
=~/.emacs.d= directory. This keeps your working directories clean and
uncluttered, storing all backup and autosave files in a centralized
location.
#+begin_src elisp :tangle early-init.el
  ;; Configure Emacs to store backup and autosave files in separate subdirectories
  ;; within the .emacs.d directory, preventing clutter in working directories.
  (setq backup-directory-alist
        `((".*" . ,"~/.emacs.d/backups")))
  (setq auto-save-file-name-transforms
        `((".*" ,"~/.emacs.d/auto-saves" t)))
  ;; Adjust auto-save settings: set the timeout to 10 seconds and the save interval to 150 keystrokes.
  (setq auto-save-timeout 10
        auto-save-interval 150)
#+end_src

** Surpress native-comp warnings
Emacs can sometimes produce native-compilation warnings, especially
when using newer features or packages that utilize native code
compilation. These warnings can be distracting or unnecessary for the
average user. This section of the configuration silences these
warnings, leading to a cleaner and less distracting Emacs
experience. It's especially useful if you're not actively debugging
Emacs packages or your Emacs configuration.
#+begin_src elisp :tangle early-init.el
  ;; Suppress warnings from Emacs's native-compilation feature.
  ;; This prevents the display of potentially distracting compiler warnings.
  (setq native-comp-async-report-warnings-errors 'silent) ;; Silences native-comp warnings.
  (setq warning-suppress-types '((comp))) ;; Suppresses specific compiler-related warnings.
#+end_src

** Tell a Fortune
This is a fun and unique addition to your Emacs configuration. It uses
the fortune program (a classic Unix program that displays a
pseudorandom message from a database of quotations) to display a
random 'fortune' message in the scratch buffer upon Emacs
startup. This feature adds a bit of personality and whimsy to your
Emacs setup, greeting you with a different quote or message each time
you start Emacs.
#+begin_src elisp :tangle early-init.el
  ;; Display a random fortune message in the scratch buffer upon startup.
  ;; This requires the 'fortune' program to be installed on the system.
  (setq initial-buffer-choice t) ;; Use the *scratch* buffer as the initial buffer.
  (when (executable-find "fortune")
    (let ((fortune-output (shell-command-to-string "fortune")))
      ;; Format and set the initial scratch message to a fortune quote.
      (setq initial-scratch-message
            (concat ";; "
                    (replace-regexp-in-string "\n" "\n;; " fortune-output)
                    "\n\n"))))
#+end_src
